@startuml
package aop {
    annotation LogProcessTime

    class LoggingAspect {
        + logProcessTime(proceedingJoinPoint: ProceedingJoinPoint): Object
    }
    LoggingAspect -[dotted]-> LogProcessTime
}
package filter {
}
package interceptor {
}

package DTO {
    class OrderSearchFilter {
        - memberName: String
        - orderStatus: OrderStatus
        + getMemberName(): String
        + getOrderStatus(): OrderStatus
    }

    class AddressForm {
        - city: String
        - street: String
        - zipCode: String
        + static formToEntity(form: AddressForm): Address
        + static entityToForm(address: Address): AddressForm
    }


    class MemberForm {
        - name: String
        - nickname: String
        - address: AddressForm
        + static formToMember(form: MemberForm): Member
        + static memberToForm(member: Member): MemberForm
    }
}

package domain {
    package Common_domain {
        class Address {
            - city: String
            - street: String
            - zipCode: String
        }
        AddressForm -[dotted]-> Address

        class Edits {
            - inputTime: LocalDateTime
            - deleted: DeletedFlag
            - member: Member
        }
        Edits --> "1" DeletedFlag

        enum DeletedFlag {
            Y, N
        }
    }

    package Category_domain {
        class Category {
            - id: Long
            - name: String
            - edit: Edits
            - parent: Category
            - children: List<Category>
            - items: List<Item>
        }
        Category --> Category
    }

    package Account_domain {
        class Member {
            - id: Long
            - name: String
            - nickname: String
            - address: Address
            - edits: Edits
            - orders: List<Order>
        }
        MemberForm --> "1" AddressForm
        MemberForm -[dotted]-> Member
        Member --> "1" Address
        Edits --> "1" Member
    }

    package Orders_domain {
        class Order {
            - id: Long
            - orderDate: LocalDateTime
            - status: OrderStatus
            - edits: Edits
            - member: Member
            - delivery: Delivery
        }
        Order --> "1" Member
        Order --> "1" OrderStatus
        OrderSearchFilter --> "1" OrderStatus

        enum OrderStatus {
            ORDER, CANCEL
        }

        class OrderItem {
            - id: Long
            - item: Item
            - order: Order
            - edits: Edits
            - orderPrice: int
            - count: int
        }
        OrderItem --> "1" Order
    }

    package Delivery_domain {
        class Delivery {
            - id: Long
            - address: Address
            - status: DeliveryStatus
            - edits: Edits
            - order: Order
        }
        Order "1" <--> "1" Delivery
        Delivery --> "1" DeliveryStatus
        Delivery --> "1" Address

        enum DeliveryStatus {
            READY, COMP
        }
    }

    package Items_domain {
        abstract class Item {
            - id: Long
            - name: String
            - stockQuantity: int
            - price: int
            - edits: Edits
            - categories: List<Category>

            + addStock(quantity: int): void
            + removeStock(quantity: int): void
        }
        OrderItem --> "1" Item
        Category --> "*" Item

        class Album {
            - artist: String
            - etc: String
        }
        Album --|> Item

        class Book {
            - author: String
            - isbn: String
        }
        Book --|> Item

        class Movie {
            - director: String
            - actor: String
        }
        Movie --|> Item
    }
}

package mvc {
    class MainController {
        + mainView(): main
    }

    package ViewTemplate {
        note top of ViewTemplate
             뷰템플릿의 $ 한개는
             디렉토리 구분을 위해서 쓰임탬
        end note

        interface member$signup_form
        interface member$member_list
        interface common$error
        interface main

        MemberController -[dotted]-> main
        MemberController -[dotted]-> member$signup_form
        MemberController -[dotted]-> member$member_list
        MainController -[dotted]-> main
    }
    package mvc_member {
        class MemberController {
            - memberService: MemberService
            + viewSignupForm(model: Model): member$signup_form
            + viewMemberList(model: Model): member$member_list
            + signup(memberForm: MemberForm, result: BindingResult): main | member$signup_form
        }
        MemberController --> "1" MemberService

        class MemberRepository {
            - em: EntityManager
            + save(member: Member): void
            + findOne(id: Long): Member
            + findAll(): List<Member>
            + findByName(name: String): List<Member>
            + findByNickname(nickname: String): Member
        }

        interface MemberService {
            + signUp(member: Member): Long
            + findOneMember(id: Long): Member
            + findAllMembers(): List<Member>
        }

        class MemberServiceImpl {
            - memberRepository: MemberRepository
            + signUp(member: Member): Long
            + findOneMember(id: Long): Member
            + findAllMembers(): List<Member>
            - findDuplicateMember(member: Member): void
        }
        MemberServiceImpl --|> MemberService
        MemberServiceImpl --> "1" MemberRepository
    }

    package mvc_item {
        class ItemRepository {
            - em: EntityManager
            + save(item: Item): void
            + findOne(id: Long): Item
            + findAll(): List<Item>
        }

        interface ItemService {
            + save(item: Item): void
            + findItems(): List<Item>
            + findOne(id: Long): Item
        }

        class ItemServiceImpl {
            - itemRepository: ItemRepository
            + save(item: Item): void
            + findItems(): List<Item>
            + findOne(id: Long): Item
        }
        ItemServiceImpl --|>ItemService
        ItemServiceImpl --> "1" ItemRepository
    }

    package mvc_order {
        class OrderRepository {
            + save(order: Order)
            + fineOne(id: Long): Order
            + searchOrders(filter: OrderSearchFilter): List<Order>
        }
        OrderRepository -[dotted]-> OrderSearchFilter

        interface OrderService {
            + createOrder(memberId: Long, itemId: Long, count: int)
            + cancelOrder(orderId: Long)
            + searchOrders(filter: OrderSearchFilter)
        }
        OrderService -[dotted]-> OrderSearchFilter

        class OrderServiceImpl {
            - orderRepository: OrderRepository
            - memberRepository: MemberRepository
            - itemRepository: ItemRepository
            + createOrder(memberId: Long, itemId: Long, count: int)
            + cancelOrder(orderId: Long)
            + searchOrders(filter: OrderSearchFilter)
        }
        OrderServiceImpl --|> OrderService
        OrderServiceImpl --> "1" OrderRepository
        OrderServiceImpl --> "1" MemberRepository
        OrderServiceImpl --> "1" ItemRepository
    }
}

package i18n {
    interface MessageService {
        + convertMessage(messageId: String, args: ...String): String
    }

    class MessageServiceImpl {
        - messageSource: MessageSource
        + convertMessage(messageId: String, args: ...String): String
    }
    MessageServiceImpl --|> MessageService

    class GlobalConfig {
        + messageSource(basename: String, encoding: String, cacheTime: int): MessageSource
        + localeResolver(): LocaleResolver
        + localeChangeInterceptor(): LocaleChangeInterceptor
        + addInterceptors(registry: InterceptorRegistry)
    }

    interface $$WebMvcConfigurer
    GlobalConfig --|> $$WebMvcConfigurer
    note left of $$WebMvcConfigurer
        $$은 스프링에 의해서 제공되는
        객체, 인터페이스 등을 의미함
    end note
}

package Exception {
    enum ExceptionCase {
        DUPLICATE_ROW, NOT_ENOUGH_STOCK
    }

    class CommonError {
        - exceptionCase: ExceptionCase
        - errorCode: String
        - messageId: String
        - errorMessage: String
        - args: String[]
        + setErrorMessage(messageService: MessageService)
        + getErrorCode(): String
        + getMessageId(): String
        + getErrorMessage(): String
    }
    CommonError --|> JPAShopError
    CommonError --> "1" ExceptionCase
    CommonError -[dotted]-> MessageService

    interface JPAShopError {
        + setErrorMessage(messageService: MessageService)
        + getErrorCode(): String
        + getMessageId(): String
        + getErrorMessage(): String
    }
    class ExceptionController {
        - messageService: MessageService
        + handleException(e: CommonError, model: RedirectAttributes): common$error
    }
    ExceptionController -[dotted]-> common$error
    ExceptionController --> "1" MessageService
}
@enduml